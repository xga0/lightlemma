name: Test and Deploy to PyPI

on:
  # Trigger on GitHub release publication
  release:
    types: [published]
  
  # Still allow PRs for testing only (no deployment)
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test package build
      run: |
        python -m build
        twine check dist/*

  deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy on release publication
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from release tag
      id: version
      run: |
        # Extract version from release tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"
        echo "Release name: ${{ github.event.release.name }}"
        echo "Release tag: ${{ github.event.release.tag_name }}"
    
    - name: Verify version matches
      run: |
        # Check that the release tag version matches the version in pyproject.toml
        TOML_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
        TAG_VERSION=${{ steps.version.outputs.version }}
        
        echo "Version in pyproject.toml: $TOML_VERSION"
        echo "Version from release tag: $TAG_VERSION"
        
        if [ "$TOML_VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Version mismatch between release tag ($TAG_VERSION) and pyproject.toml ($TOML_VERSION)"
          exit 1
        fi
        echo "Version verification passed!"
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Update release with PyPI link
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const release_id = context.payload.release.id;
          const version = "${{ steps.version.outputs.version }}";
          
          const currentBody = context.payload.release.body || "";
          const pypiLink = `\n\nðŸ“¦ **Package available on PyPI**: https://pypi.org/project/lightlemma/${version}/`;
          
          await github.rest.repos.updateRelease({
            owner,
            repo,
            release_id,
            body: currentBody + pypiLink
          }); 