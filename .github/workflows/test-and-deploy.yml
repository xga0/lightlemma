name: Test and Deploy to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test package build
      run: |
        python -m build
        twine check dist/*

  deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy on main branch pushes or manual workflow dispatch
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Configure git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git config --global --add safe.directory /github/workspace
    
    - name: Bump version
      id: bump
      run: |
        # Determine version bump type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
        else
          BUMP_TYPE="patch"
        fi
        
        # Run version bump script
        python .github/workflows/version_bump.py pyproject.toml $BUMP_TYPE > bump_output.txt
        
        # Extract version information
        NEW_VERSION=$(grep "Bumped version from" bump_output.txt | sed 's/.*to //')
        OLD_VERSION=$(grep "Bumped version from" bump_output.txt | sed 's/Bumped version from //' | sed 's/ to.*//')
        
        echo "Old version: $OLD_VERSION"
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Commit version bump
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Push changes
      run: |
        git push origin main
        git push origin --tags
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.bump.outputs.version }}
        name: Release v${{ steps.bump.outputs.version }}
        body: |
          Automated release v${{ steps.bump.outputs.version }}
          
          ## Changes
          - Automatic version bump and deployment
          - All tests passed successfully
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }} 